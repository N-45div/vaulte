// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LoanDisbursed extends ethereum.Event {
  get params(): LoanDisbursed__Params {
    return new LoanDisbursed__Params(this);
  }
}

export class LoanDisbursed__Params {
  _event: LoanDisbursed;

  constructor(event: LoanDisbursed) {
    this._event = event;
  }

  get investorAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get merchantAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get loanCategory(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Subscription extends ethereum.Event {
  get params(): Subscription__Params {
    return new Subscription__Params(this);
  }
}

export class Subscription__Params {
  _event: Subscription;

  constructor(event: Subscription) {
    this._event = event;
  }

  get userAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get merchantAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tier(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get subTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SubscriptionPayment extends ethereum.Event {
  get params(): SubscriptionPayment__Params {
    return new SubscriptionPayment__Params(this);
  }
}

export class SubscriptionPayment__Params {
  _event: SubscriptionPayment;

  constructor(event: SubscriptionPayment) {
    this._event = event;
  }

  get userAccount(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get merchantAccount(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get paymentAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get paymentTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Vaulte extends ethereum.SmartContract {
  static bind(address: Address): Vaulte {
    return new Vaulte("Vaulte", address);
  }

  disbursedCount(): BigInt {
    let result = super.call("disbursedCount", "disbursedCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_disbursedCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "disbursedCount",
      "disbursedCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  investorFactoryAddress(): Address {
    let result = super.call(
      "investorFactoryAddress",
      "investorFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_investorFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "investorFactoryAddress",
      "investorFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  merchantFactoryAddress(): Address {
    let result = super.call(
      "merchantFactoryAddress",
      "merchantFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_merchantFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "merchantFactoryAddress",
      "merchantFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subscriptionCount(): BigInt {
    let result = super.call(
      "subscriptionCount",
      "subscriptionCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_subscriptionCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscriptionCount",
      "subscriptionCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subscriptionPaymentCount(): BigInt {
    let result = super.call(
      "subscriptionPaymentCount",
      "subscriptionPaymentCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_subscriptionPaymentCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "subscriptionPaymentCount",
      "subscriptionPaymentCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userFactoryAddress(): Address {
    let result = super.call(
      "userFactoryAddress",
      "userFactoryAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_userFactoryAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "userFactoryAddress",
      "userFactoryAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get investorAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get offerId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class ChargeCall extends ethereum.Call {
  get inputs(): ChargeCall__Inputs {
    return new ChargeCall__Inputs(this);
  }

  get outputs(): ChargeCall__Outputs {
    return new ChargeCall__Outputs(this);
  }
}

export class ChargeCall__Inputs {
  _call: ChargeCall;

  constructor(call: ChargeCall) {
    this._call = call;
  }

  get userAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get merchantAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ChargeCall__Outputs {
  _call: ChargeCall;

  constructor(call: ChargeCall) {
    this._call = call;
  }
}

export class ContributePoolCall extends ethereum.Call {
  get inputs(): ContributePoolCall__Inputs {
    return new ContributePoolCall__Inputs(this);
  }

  get outputs(): ContributePoolCall__Outputs {
    return new ContributePoolCall__Outputs(this);
  }
}

export class ContributePoolCall__Inputs {
  _call: ContributePoolCall;

  constructor(call: ContributePoolCall) {
    this._call = call;
  }

  get investorPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ContributePoolCall__Outputs {
  _call: ContributePoolCall;

  constructor(call: ContributePoolCall) {
    this._call = call;
  }
}

export class FundRequestCall extends ethereum.Call {
  get inputs(): FundRequestCall__Inputs {
    return new FundRequestCall__Inputs(this);
  }

  get outputs(): FundRequestCall__Outputs {
    return new FundRequestCall__Outputs(this);
  }
}

export class FundRequestCall__Inputs {
  _call: FundRequestCall;

  constructor(call: FundRequestCall) {
    this._call = call;
  }

  get merchantAccount(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class FundRequestCall__Outputs {
  _call: FundRequestCall;

  constructor(call: FundRequestCall) {
    this._call = call;
  }
}

export class GetLoanCall extends ethereum.Call {
  get inputs(): GetLoanCall__Inputs {
    return new GetLoanCall__Inputs(this);
  }

  get outputs(): GetLoanCall__Outputs {
    return new GetLoanCall__Outputs(this);
  }
}

export class GetLoanCall__Inputs {
  _call: GetLoanCall;

  constructor(call: GetLoanCall) {
    this._call = call;
  }

  get investorPool(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get loanAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class GetLoanCall__Outputs {
  _call: GetLoanCall;

  constructor(call: GetLoanCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }

  get _userFactoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _investorFactoryAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _merchantFactoryAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class SubscribeCall extends ethereum.Call {
  get inputs(): SubscribeCall__Inputs {
    return new SubscribeCall__Inputs(this);
  }

  get outputs(): SubscribeCall__Outputs {
    return new SubscribeCall__Outputs(this);
  }
}

export class SubscribeCall__Inputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }

  get tier(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get merchantAccount(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SubscribeCall__Outputs {
  _call: SubscribeCall;

  constructor(call: SubscribeCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
